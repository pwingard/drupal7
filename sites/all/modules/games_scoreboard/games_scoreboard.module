<?php
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

/**
 * @file
 * A block module to display a scoreboard of games from NCAA JSON feed
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function games_scoreboard_help($path, $arg) {
  switch ($path) {
    case "admin/help#games_scoreboard":
      return '' . t("See a list of NCAA games...") . '';
      break;
  }
} 

/**
 * Implements hook_block_info().
 */
function games_scoreboard_block_info() {
  $blocks['games_scoreboard'] = array(
    // The name that will appear in the block list.
    'info' => t('Games scoreboard'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Custom content function. 
 * 
 * 
 * @return 
 *   A result set of the targeted posts.
 */
function games_scoreboard_contents(){

  $jsonDataPath = "http://i.turner.ncaa.com/sites/default/files/external/test/scoreboard.json";

  //retreive and parse the json from URL.
  $jsonData= drupal_http_request($jsonDataPath);
  $gamesScoreboardArr = drupal_json_decode($jsonData->data);

  return $gamesScoreboardArr;  
}

/**
 * Implements hook_block_view().
 * 
 * Prepares the contents of the block.
 */
function games_scoreboard_block_view($delta = '') {
  switch ($delta) {
    case 'games_scoreboard':
      $block['subject'] = t('Games scoreboard');

//Games should be presented sorted by the game status - live, pre, final - and then by time.
 
        $results = games_scoreboard_contents();

        //group results by state:  live, pre, final
        foreach ($results as $result) {
            $resultsByStates[$result["state"]][]=$result;
        }
        
        //sort each game state array by time
        foreach ($resultsByStates as $state => $stateArr) {
            usort($stateArr,  function ($a, $b) {     
            return strcmp($a['startTimeEpoch'], $b['startTimeEpoch']); 
            });
        }
        
        }
        
        $items = array();
        // Iterate over the result set and format as links.
        foreach ($resultsByStates as $resultsByState) {
            foreach ($resultsByState as &$node) {
                
                //ranks of '0' altered to '-'
                if($node["away"]["rank"]==0) $node["away"]["rank"]="-";
                if($node["home"]["rank"]==0) $node["home"]["rank"]="-";

                /*
                Each game section should contain:
                the game status (the state)
                both team names, home and away
                team ranks and records
                the team's scores (if any)
                 */
                $items[$node["state"]][] =array("data"=>
                    t("<p><strong>"
                    .$node["away"]["name"]."</strong> "
                    .", Record ". $node["away"]["record"].", Rank ". $node["away"]["rank"]
               
                    ." @<strong>"
                    . $node["home"]["name"]."</strong> "
                    .", Record ". $node["home"]["record"].", Rank ". $node["home"]["rank"]
                    
                    ." </p><p>Score ". $node["away"]["score"]
                    ."-". $node["home"]["score"].", "
                    
                    . " " .stateFormat($node["state"])." "
                    .$node["startTimeDisplay"]
                    
                    ."</p>"
                            ),
                    );
          }
        }
          
       // No content in the last week.
        if (empty($items)) {
          $block['content'] = t('No game scores available.');  
        } 
        else {
          // Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => array_merge($items["live"], $items["pre"],$items["final"])));
        }
    return $block;
  }
  
/**
 * Implements hook_menu().
 */
function games_scoreboard_menu() {
    $items = array();

    $items['admin/config/content/games_scoreboard'] = array(
      'title' => 'Games Scoreboard',
      'description' => 'NCAA Basketball game scoreboard',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('games_scoreboard_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: Current posts settings
 *
 * @see current_posts_menu()
 */
function games_scoreboard_form($form, &$form_state) {
  $form['games_scoreboard_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of games shown'),
    '#default_value' => variable_get('games_scoreboard_max', 25),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of games to display in the block.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

//clarify game state in output
function stateFormat($state){
      switch ($state) {
          case "final":
              return "Final ";
          case "pre":
              return "Starting at ";
          case "live":
              return "Live as of ";
              break;
          default:
              return $state;
              break;
      }
  }
